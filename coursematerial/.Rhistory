getwd()
library(tm) ## Framework for text mining.
library(RWeka) ##
library(wordcloud)
library(SnowballC) ## Provides wordStem() for stemming.
library(qdap) ## Quantitative discourse analysis of transcripts.
library(qdapDictionaries)
library(dplyr) ## Data preparation and pipes %>%.
library(RColorBrewer) ## Generate palette of colours for plots.
library(ggplot2) ## Plot word frequencies.
library(scales) ## Include commas in numbers.
library(Rgraphviz) ## Correlation plots.
set.seed(47)
bigram <- function(x) NGramTokenizer(x, Weka_control(min = 2, max = 2))
trigram <- function(x) NGramTokenizer(x, Weka_control(min = 3, max = 3))
quadgram <- function(x) NGramTokenizer(x, Weka_control(min = 4, max = 4))
toSpace <- content_transformer(function(x, pattern) gsub(pattern, " ", x)) ## function for tm_map to turn desired string into a space
## the following function was necessary after creating the occurence percentages of the ngrams
## any zero occurence percentage resulted in an element of length zero which resulted in the the object being coerced into class list
# returns string w/o leading whitespace  http://stackoverflow.com/questions/2261079/how-to-trim-leading-and-trailing-whitespace-in-r
trim.leading <- function (x)  sub("^\\s+", "", x)
# returns string w/o trailing whitespace
trim.trailing <- function (x) sub("\\s+$", "", x)
# returns string w/o leading or trailing whitespace
trim <- function (x) gsub("^ *|(?<= ) | *$", "", x, perl = T)
install.packages('snow')
install.packages('Rmpi')
library('Rmpi'); library('snow')
library(Rmpi)
install.packages('Rmpi')
library(Rmpi)
vignette(package="parallel", topic = "parallel")
install.packages('paralles')
install.packages('parallel')
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
if (require(devtools)) install.packages("devtools")#if not alrady installed
devtools::install_github("AnalytixWare/ShinySky")
install.packages("devtools")
if (require(devtools)) install.packages("devtools")#if not alrady installed
devtools::install_github("AnalytixWare/ShinySky")
library(shinysky)
shinysky::run.shinysky.example()
if (require(devtools)) install.packages("devtools")#if not alrady installed
devtools::install_github("AnalytixWare/ShinySky")
library(shinysky)
shinysky::run.shinysky.example()
sq.foot <- c(450, 300, 350)
rooms <- c(3, 2, 2)
age <- c(15, 10, 12)
levels <- c(2, 1, 2)
X <- cbind(sq.foot, rooms, age, levels)
View(X)
Y <- c(150, 100, 150)
(tansverse(X)*X)^-1
(rtansverse(X)*X)^-1
(transverse(X)*X)^-1
(t(X)*X)^-1
(t(X)*X.)^-1
(t(.X)*X)^-1
(t(X) %%*%% X)^-1
(t(X) %*% X)^-1
((t(X) %*% X)^-1) %*% (t(X) %*% Y)
b <- ((t(X) %*% X)^-1) %*% (t(X) %*% Y)
D <- c(250, 2, 9, 1)
b * D
((t(X) %*% X)) %*% (t(X) %*% Y)
b %*% D
fit <- lm(Y~., data = cbind(X, Y))
fit <- lm(Y~., data = data.frame(cbind(X, Y)))
fit$coefficients
fit
beta = solve(t(X) %*% X) %*% (t(X) %*% Y) ; beta
t(X) %*% X
(t(X) %*% X)^-1
(t(X) %*% X)^-1 * X
(t(X) %*% X)^-1 %*% X
(t(X) %*% X)^-1 %*% t(X)
(t(X) %*% X)^-1 %*% t(X) %*% Y
b / (t(X) %*% X)^-1 %*% t(X)
b %/% (t(X) %*% X)^-1 %*% t(X)
b %*% ((t(X) %*% X)^-1 %*% t(X))^1
b
t(x) %*% Y
t(X) %*% Y
(t(X) %*% Y) / (t(X) %*% X)
(t(X) %*% Y) %*% (t(X) %*% X)^1
b <- solve(t(X) %*% X) %*% t(X) %*% Y
X$sq.foot
X[,1]
X[,1] <- c(4, 5, 6)
View(X)
b <- solve(t(X) %*% X) %*% t(X) %*% Y
X[,3] <- c(7, 8, 9)
b <- solve(t(X) %*% X) %*% t(X) %*% Y
corr(X)
cor(X)
View(X)
X[,1] <- c(4.5, 3, 3.5)
View(X)
X[,3] <- c(1.5, 1, 1.2)
b <- solve(t(X) %*% X) %*% t(X) %*% Y
Y <- c(1.5, 1, 1.5)
b <- solve(t(X) %*% X) %*% t(X) %*% Y
cor(cbind(X, Y))
X[,4] <- c(5, 3, 2)
cor(cbind(X, Y))
b <- solve(t(X) %*% X) %*% t(X) %*% Y
mtcars
mtcars[1:4, 1:4]
set <- mtcars[1:4, 1:4]
set$mpg
Y <- set$mpg
set[,2:4]
X <- set[,2:4]
b <- solve(t(X) %*% X) %*% t(X) %*% Y
as.matrix(X)
X <- as.matrix(X)
Y <- as.matrix(Y)
b <- solve(t(X) %*% X) %*% t(X) %*% Y
View(b)
b * mtcars[5,2:4]
sum(b * mtcars[5,2:4])
mtcars[5,2:4]
b
sum(b %*% mtcars[5,2:4])
sum(b * mtcars[4,2:4])
sum(b * mtcars[3,2:4])
View(mtcars)
sum(b * mtcars[2,2:4])
sum(b * mtcars[1,2:4])
sum(b * mtcars[5,2:4])
sum(b * mtcars[6,2:4])
sum(b * mtcars[7,2:4])
sum(b * mtcars[6,2:4])
pred <- sapply(1:32, function(x){
sum(b * mtcars[x,2:4])
})
comp <- cbind(mtcars$mpg, pred)
View(comp)
mtcars[6,2:4]
X
Y
b
sum(mtcars[6,2:4] * b)
b * mtcars[6, 2:4]
setwd("D:/Documents/GitHub/Udacity-DataAnalyst Nanodegree/Datasets")
df <- read.csv('turnstileM.csv')
library(ggplot2)
p = ggplot(aes(x = df$ENTRIESn_hourly), data = df)
p + geom_histogram()
log(4)
p = ggplot(aes(x = log(df$ENTRIESn_hourly)), data = df)
p + geom_histogram()
rain = df[df$rain == 1]
rain = df[df$rain == 1,]
norain = df[df$rain == 0,]
p = ggplot(aes(x = log(df$ENTRIESn_hourly)), data = rain)
p + geom_histogram()
p = ggplot(aes(x = log(rain$ENTRIESn_hourly)), data = rain)
p + geom_histogram()
log(rain$ENTRIESn_hourly)
p = ggplot(aes(x = log(rain$ENTRIESn_hourly)), data = rain)
p + geom_point()
View(df)
View(rain)
View(norain)
class(df)
class(rain)
rain = df[df$rain == 1,]
norain = df[df$rain == 0,]
hist(rain)
hist(rain$ENTRIESn_hourly)
hist(log(rain$ENTRIESn_hourly))
hist(log(norain$ENTRIESn_hourly))
hist(log(rain$ENTRIESn_hourly))
hist(log(norain$ENTRIESn_hourly))
hist(log(norain$ENTRIESn_hourly)
hist(norain$ENTRIESn_hourly)
hist(rain$ENTRIESn_hourly)
hist(norain$ENTRIESn_hourly)
hist(rain$ENTRIESn_hourly)
length(df[df$rain == 1]$ENTRIESn_hourly == 1)
length(df[df$rain == 1,]$ENTRIESn_hourly == 1)
length(df[df$rain == 1,]$ENTRIESn_hourly == 0)
length(rain$ENTRIESn_hourly == 0)
length(rain$ENTRIESn_hourly == 1)
length(rain$ENTRIESn_hourly < 0 )
length(rain$ENTRIESn_hourly > 0 )
length(which(rain$ENTRIESn_hourly > 0 ))
length(which(rain$ENTRIESn_hourly = 0))
length(which(rain$ENTRIESn_hourly == 0))
length(which(norain$ENTRIESn_hourly == 0))
length(norain)
nrows(norain)
??nrows
nrow(norain)
length(which(norain$ENTRIESn_hourly == 0))/nrow(norain)
length(which(rain$ENTRIESn_hourly == 0))/nrow(rain)
length(which(rain$ENTRIESn_hourly > 0))/nrow(rain)
length(which(norain$ENTRIESn_hourly > 0))/nrow(norain)
qplot(ENTRIESn_hourly, data = df, geom = "histogram")
qplot(ENTRIESn_hourly, data = rain, geom = "histogram")
qplot(ENTRIESn_hourly, data = norain, geom = "histogram")
p = ggplot(df, aes(x = ENTRIESn_hourly))
p = ggplot(df, aes(x = ENTRIESn_hourly, color = rain))
p + geom_histogram()
class(df$ENTRIESn_hourly)
p + geom_histogram(binwidth = range/60)
p + geom_histogram(binwidth = 1)
p = ggplot(df, aes(x = ENTRIESn_hourly, color = as.factor(rain)))
p + geom_histogram()
p = ggplot(df, aes(x = ENTRIESn_hourly))
p + geom_histogram()
p = ggplot(df, aes(x = ENTRIESn_hourly, color = as.factor(rain)))
p + geom_histogram(binwidth = 0.2)
p + geom_histogram(binwidth = 1)
p = ggplot(df[which(df$ENTRIESn_hourly < 5000),], aes(x = ENTRIESn_hourly, color = as.factor(rain)))
p + geom_histogram(binwidth = 1)
p = ggplot(df[which(df$ENTRIESn_hourly <= 1000),], aes(x = ENTRIESn_hourly, color = as.factor(rain)))
p + geom_histogram(binwidth = 1)
p = ggplot(df[which(df$ENTRIESn_hourly <= 250),], aes(x = ENTRIESn_hourly, color = as.factor(rain)))
p + geom_histogram(binwidth = 1)
p = ggplot(df[which(df$ENTRIESn_hourly <= 250 & df$ENTRIESn_hourly > 0),], aes(x = ENTRIESn_hourly, color = as.factor(rain)))
p + geom_histogram(binwidth = 1)
p = ggplot(df[which(df$ENTRIESn_hourly <= 1000 & df$ENTRIESn_hourly > 0),], aes(x = ENTRIESn_hourly, color = as.factor(rain)))
p + geom_histogram(binwidth = 1)
p = ggplot(df[which(df$ENTRIESn_hourly <= 1000 & df$ENTRIESn_hourly > 0),], aes(x = log(ENTRIESn_hourly), color = as.factor(rain)))
p + geom_histogram(binwidth = 1)
p = ggplot(df[which(df$ENTRIESn_hourly > 0),], aes(x = log(ENTRIESn_hourly), color = as.factor(rain)))
p + geom_histogram(binwidth = 1)
wilcox.test(rain$ENTRIESn_hourly, norain$ENTRIESn_hourly)
ndf <- df[,-7]
pca <- prcomp(ndf)
ndf$UNIT <- as.numeric(ndf$UNIT)
pca <- prcomp(ndf)
ndf <- apply(ndf, 2, as.numeric)
pca <- prcomp(ndf)
is.na(ndf)
ndf[is.na(ndf)] <- 0
pca <- prcomp(ndf)
View(pca$rotation)
plot(pca)
ndf[,-1]
ndf <- ndf[,-1]
pca <- prcomp(ndf)
plot(pca)
View(pca$rotation)
plot(pca, type = 'l')
fit <- lm(ENTRIESn_hourly~UNIT, data = df)
summary(fit)
ndf <- ndf[,-6]
View(ndf)
pca <- prcomp(ndf)
View(pca$rotation)
ndf <- ndf[,-5]
pca <- prcomp(ndf)
View(pca$rotation)
plot(pca)
plot(pca, type = 'l')
fit <- (ENTRIESn_hourly~UNIT + mindewpti, data = df)
fit <- lm(ENTRIESn_hourly~UNIT + mindewpti, data = df)
summary(fit)
ndf <- ndf[,-3]
pca <- prcomp(ndf)
View(pca$rotation)
t.test(rain$ENTRIESn_hourly, norain$ENTRIESn_hourly)
t.test(log(rain$ENTRIESn_hourly), log(norain$ENTRIESn_hourly)
_
t.test(log(rain$ENTRIESn_hourly), log(norain$ENTRIESn_hourly))
lrain <- log(rain$ENTRIESn_hourly)
lnorain <- log(norain$ENTRIESn_hourly)
t.test(lrain, lnorain)
mean(lrain)
max(lrain)
min(lrain)
lrain <- log(rain$ENTRIESn_hourly[rain$ENTRIESn_hourly > 0,])
lrain <- log(rain$ENTRIESn_hourly[rain$ENTRIESn_hourly > 0])
lnorain <- log(norain$ENTRIESn_hourly[norain$ENTRIESn_hourly > 0])
t.test(lrain, lnorain)
wilcox.test(norain$ENTRIESn_hourly, rain$ENTRIESn_hourly)
?wilcox.test
wilcox.test(norain$ENTRIESn_hourly, rain$ENTRIESn_hourly, conf.level = 0.95)
wilcox.test(norain$ENTRIESn_hourly, rain$ENTRIESn_hourly, conf.level = 0.99)
wilcox.test(norain$ENTRIESn_hourly, rain$ENTRIESn_hourly, conf.level = 0.80)
wilcox.test(norain$ENTRIESn_hourly, rain$ENTRIESn_hourly, alternative = "less")
mean(norain$ENTRIESn_hourly)
mean(rain$ENTRIESn_hourly)
ndf <- ndf[,-1]
pca <- prcomp(ndf)
View(pca$rotation)
plot(pca)
plot(pca, type = 'l')
fit <- lm(ENTRIESn_hourly~UNIT + mindewpti + mintempi, data = df)
summary(fit)
fit <- lm(ENTRIESn_hourly~UNIT + Hour + mindewpti + mintempi, data = df)
summary(fit)
fit <- lm(ENTRIESn_hourly~UNIT + Hour + maxpressurei + rain + maxdewpti + maxtempi, data = df)
summary(fit)
fit <- lm(ENTRIESn_hourly~UNIT + DATEn + Hour + maxpressurei + rain + maxdewpti + maxtempi, data = df)
summary(fit)
fit <- lm(ENTRIESn_hourly~UNIT + DATEn + Hour, data = df)
summary(fit)
